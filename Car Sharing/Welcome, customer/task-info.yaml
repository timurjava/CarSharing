type: edu
custom_name: "Welcome, customer!"
files:
  - name: test/CarSharingTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      import org.junit.BeforeClass;
      
      import java.io.File;
      
      public class CarSharingTest extends StageTest<Void> {
      
          private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
          private static DatabaseUtil db = new DatabaseUtil();
      
          @BeforeClass
          public static void deleteDatabaseFile() {
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return;
              }
      
              if (!file.delete()) {
                  throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                      "Make sure you close all the connections with the database file!");
              }
          }
      
          @DynamicTest(order = 1)
          public CheckResult test2_ifDatabaseExist() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
              program.execute("0");
      
              if (!program.isFinished()) {
                  return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
              }
      
              File file = new File(databaseFileName);
      
              if (!file.exists()) {
                  return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                      " and located in /carsharing/db/ folder.\n" +
                      "The file should be created right after starting the program!");
              }
      
              return correct();
          }
      
          @DynamicTest(order = 2)
          public CheckResult test1_testMenu() {
              TestedProgram program = new TestedProgram();
              String output = program.start("-databaseFileName", "carsharing");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("Start menu should contain \"0. Exit\"");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Company list")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
              }
      
              if (!output.contains("2. Create a company")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
              }
      
              if (!output.contains("0. Back")) {
                  return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
              }
      
              output = program.execute("0");
      
              if (!output.contains("1. Log in as a manager")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
              }
      
              if (!output.contains("0. Exit")) {
                  return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
              }
      
              return CheckResult.correct();
          }
      
          @DynamicTest(order = 3)
          public CheckResult test3_checkDatabaseConnection() {
              db.getConnection();
              return correct();
          }
      
          @DynamicTest(order = 4)
          public CheckResult test4_checkIfTableExists() {
              if (!db.ifTableExist("company")) {
                  return wrong("Can't find table named 'company'");
              }
              if (!db.ifTableExist("car")) {
                  return wrong("Can't find table named 'car'");
              }
              return correct();
          }
      
          @DynamicTest(order = 5)
          public CheckResult test5_checkTableColumns() {
              String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
              db.ifColumnsExist("company", companyColumns);
              db.checkCompanyColumnProperties();
      
              String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
              db.ifColumnsExist("car", carColumns);
              db.checkCarColumnProperties();
      
              String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
              db.ifColumnsExist("customer", customerColumns);
              db.checkCustomerColumnProperties();
              return correct();
          }
      
          @DynamicTest(order = 6)
          public CheckResult test6_testAddCompany() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
      
              db.clearCustomerTable();
              db.clearCarTable();
              db.clearCompanyTable();
      
              program.execute("1");
              String output = program.execute("1");
      
              if (!output.contains("The company list is empty")) {
                  return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
              }
      
              output = program.execute("2");
      
              if (!output.contains("Enter the company name")) {
                  return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                      "Your output should contain 'Enter the company name:'");
              }
      
              program.execute("Super company");
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return wrong("In the company list expected one company.\n" +
                      "Your output should contain '1. Super company'");
              }
      
              db.checkCompany("Super company");
      
              program.execute("0\n2\nAnother company");
              program.execute("2\nOne more company");
      
              db.checkCompany("Another company");
              db.checkCompany("One more company");
      
              output = program.execute("1");
      
              if (!output.contains("1. Super company")) {
                  return wrong("In the company list expected 'Super company' company.\n" +
                      "Your output should contain '1. Super company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Another company")) {
                  return wrong("In the company list expected 'Another company' company.\n" +
                      "Your output should contain '2. Another company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("3. One more company")) {
                  return wrong("In the company list expected 'One more company' company.\n" +
                      "Your output should contain '2. One more company'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              program.execute("2");
      
              return correct();
          }
      
          @DynamicTest(order = 7)
          public CheckResult test7_testAddCar() {
      
              TestedProgram program = new TestedProgram();
              program.start("-databaseFileName", "carsharing");
              String output;
      
              db.clearCarTable();
              db.clearCompanyTable();
              db.clearCustomerTable();
      
              program.execute("1");
              program.execute("2");
              program.execute("Car To Go");
              program.execute("2");
              program.execute("Drive Now");
      
              db.checkCompany("Car To Go");
              db.checkCompany("Drive Now");
      
              output = program.execute("1");
      
              if (!output.contains("1. Car To Go")) {
                  return wrong("In the company list expected 'Car To Go' company.\n" +
                      "Your output should contain '1. Car To Go'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Drive Now")) {
                  return wrong("In the company list expected 'Drive Now' company.\n" +
                      "Your output should contain '2. Drive Now'\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Car list")) {
                  return wrong("After choosing company you should print menu that contains '1. Car list' item");
              }
      
              if (!output.contains("2. Create a car")) {
                  return wrong("After choosing company you should print menu that contains '2. Create a car' item");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("After choosing company you should print menu that contains '0. Back' item");
              }
      
              output = program.execute("1");
      
              if (!output.contains("The car list is empty!")) {
                  return wrong("If no cars were added to the company you should print 'The car list is empty!'");
              }
      
              output = program.execute("2");
      
              if (!output.contains("Enter the car name:")) {
                  return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                      "Your output should contain 'Enter the car name:'");
              }
      
              program.execute("Hyundai Venue");
              db.checkCar("Car To Go", "Hyundai Venue");
      
              program.execute("2");
              program.execute("Maruti Suzuki Dzire");
              db.checkCar("Car To Go", "Maruti Suzuki Dzire");
      
              output = program.execute("1");
      
              if (!output.contains("1. Hyundai Venue")) {
                  return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                      "Your output should contain '1. Hyundai Venue'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Maruti Suzuki Dzire")) {
                  return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                      "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              program.execute("0");
      
              program.execute("1");
              program.execute("2");
      
              output = program.execute("1");
      
              if (!output.contains("The car list is empty!")) {
                  return wrong("If no cars were added to the company you should print 'The car list is empty!'");
              }
      
              program.execute("2");
              program.execute("Lamborghini Urraco");
      
              output = program.execute("1");
      
              if (!output.contains("1. Lamborghini Urraco")) {
                  return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                      "Your output should contain '1. Lamborghini Urraco'");
              }
      
              if (output.contains("Hyundai Venue")) {
                  return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
              }
      
              if (output.contains("Maruti Suzuki Dzire")) {
                  return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
              }
      
              db.checkCar("Drive Now", "Lamborghini Urraco");
      
              program.execute("0");
              program.execute("0");
              program.execute("0");
      
              return correct();
          }
      
          @DynamicTest(order = 8)
          public CheckResult test8_testAddCustomer() {
      
              TestedProgram program = new TestedProgram();
              String output = program.start("-databaseFileName", "carsharing");
      
              db.clearCustomerTable();
      
              if (!output.contains("2. Log in as a customer")) {
                  return wrong("Start menu should contain \"2. Log in as a customer\"");
              }
      
              if (!output.contains("3. Create a customer")) {
                  return wrong("Start menu should contain \"3. Create a customer\"");
              }
      
              output = program.execute("2");
      
              if (!output.contains("The customer list is empty!")) {
                  return wrong("If no customers were created you should print 'The customer list is empty!'");
              }
      
              output = program.execute("3");
      
              if (!output.contains("Enter the customer name:")) {
                  return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                      "Your output should contain 'Enter the customer name:'");
              }
      
              program.execute("First customer");
              db.checkCustomer("First customer", null);
      
              program.execute("3");
              output = program.execute("Second customer");
              db.checkCustomer("Second customer", null);
      
              if (!output.contains("2. Log in as a customer")) {
                  return wrong("After creating a customer you should print main menu again.\n" +
                      "Your output should contain '2. Log in as a customer'");
              }
      
              output = program.execute("2");
      
      
              if (!output.contains("1. First customer")) {
                  return wrong("In the customer list expected 'First customer' customer.\n" +
                      "Your output should contain '1. First customer'\n" +
                      "Customers should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Second customer")) {
                  return wrong("In the customer list expected 'Second customer' customer.\n" +
                      "Your output should contain '2. Second customer'\n" +
                      "Customers should be sorted by 'ID' column");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Rent a car")) {
                  return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
              }
      
              if (!output.contains("2. Return a rented car")) {
                  return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
              }
      
              if (!output.contains("3. My rented car")) {
                  return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
              }
      
              output = program.execute("3");
      
              if (!output.contains("You didn't rent a car!")) {
                  return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
              }
      
              output = program.execute("2");
      
              if (!output.contains("You didn't rent a car!")) {
                  return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
              }
      
              // If the output contains "You've returned a car!" it is wrong because the customer didn't rent a car
              if (output.contains("You've returned a rented car!")) {
                  return wrong("After choosing '2. Return a rented car' option, the customer should not be able to return a car if they haven't rented one");
              }
      
              return correct();
          }
      
          @DynamicTest(order = 9)
          public CheckResult test9_testRentCar() {
      
              TestedProgram program = new TestedProgram();
              String output;
              program.start("-databaseFileName", "carsharing");
      
              db.checkCustomer("First customer", null);
              db.checkCustomer("Second customer", null);
      
              db.checkCompany("Car To Go");
              db.checkCompany("Drive Now");
      
              db.checkCar("Drive Now", "Lamborghini Urraco");
              db.checkCar("Car To Go", "Hyundai Venue");
              db.checkCar("Car To Go", "Maruti Suzuki Dzire");
      
              program.execute("2");
              program.execute("1");
      
              output = program.execute("1");
      
              if (!output.contains("1. Car To Go")) {
                  return wrong("In the company list expected 'Car To Go' company.\n" +
                      "Your output should contain '1. Car To Go'.\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Drive Now")) {
                  return wrong("In the company list expected 'Drive Now' company.\n" +
                      "Your output should contain '2. Drive Now'\n" +
                      "Companies should be sorted by 'ID' column");
              }
      
              if (!output.contains("0. Back")) {
                  return wrong("There is no back option in the company list.\n" +
                      "Your output should contain '0. Back'");
              }
      
              output = program.execute("1");
      
              if (!output.contains("1. Hyundai Venue")) {
                  return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                      "Your output should contain '1. Hyundai Venue'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              if (!output.contains("2. Maruti Suzuki Dzire")) {
                  return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                      "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                      "Cars should be sorted by 'ID' column");
              }
      
              output = program.execute("1");
      
              if (!output.contains("You rented 'Hyundai Venue'")) {
                  return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
              }
      
              db.checkCustomer("First customer", "Hyundai Venue");
      
              if (!output.contains("3. My rented car")) {
                  return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
              }
      
              output = program.execute("3");
      
              if (!output.contains("Hyundai Venue")) {
                  return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
              }
      
              if (!output.contains("Car To Go")) {
                  return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
              }
      
              output = program.execute("1");
      
              if (!output.contains("You've already rented a car!")) {
                  return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
              }
      
              output = program.execute("2");
      
              if (!output.contains("You've returned a rented car!")) {
                  return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
              }
      
              db.checkCustomer("First customer", null);
      
              program.execute("0");
              program.execute("0");
      
              return correct();
          }
      
          @DynamicTest(order = 10)
          public CheckResult test10_testRentedCarInList() {
      
              TestedProgram program = new TestedProgram();
              String output;
              program.start("-databaseFileName", "carsharing");
      
              program.execute("2");
              program.execute("2");
              program.execute("1");
              program.execute("1");
              program.execute("1");
              program.execute("0");
      
              program.execute("2");
              program.execute("1");
              program.execute("1");
      
              output = program.execute("1");
              if (output.contains("Hyundai Venue")) {
                  return wrong("You shouldn't print out a car if it is already rented!");
              }
      
              program.execute("0");
              program.execute("0");
              program.execute("0");
      
              return correct();
          }
      
          private CheckResult wrong(String message) {
              db.closeConnection();
              return CheckResult.wrong(message);
          }
      
          private CheckResult correct() {
              db.closeConnection();
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: test/DatabaseUtil.java
    visible: false
    text: |
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      
      import java.sql.*;
      import java.util.HashMap;
      
      public class DatabaseUtil {
      
          private Connection connection = null;
          private static final String databaseFilePath = "./src/carsharing/db/carsharing";
      
          public Connection getConnection() {
              if (connection != null) {
                  return connection;
              }
              try {
                  connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't connect to the database.");
              }
              return connection;
          }
      
          public void closeConnection() {
              if (connection != null) {
                  try {
                      connection.close();
                  } catch (SQLException ignored) {
                      System.out.println(ignored.getErrorCode());
                      throw new WrongAnswer("Can't close connection to the database.");
                  }
                  connection = null;
              }
          }
      
          public ResultSet executeQuery(String query) {
              try {
                  return getConnection().createStatement().executeQuery(query);
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public boolean ifTableExist(String tableName) {
              try {
                  tableName = tableName.toUpperCase();
                  ResultSet resultSet = executeQuery("SHOW TABLES");
                  while (resultSet.next()) {
                      if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                          return true;
                      }
                  }
                  return false;
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void ifColumnsExist(String tableName, String[][] columns) {
              try {
                  ResultSet resultSet = getConnection()
                          .createStatement()
                          .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());
      
                  HashMap<String, String> correctColumns = new HashMap<>();
                  for (String[] column : columns) {
                      correctColumns.put(column[0], column[1]);
                  }
      
                  while (resultSet.next()) {
                      String columnName = resultSet.getString("FIELD");
                      if (correctColumns.containsKey(columnName)) {
                          if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                              throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                      + "' column should be of " + correctColumns.get(columnName) + " type.");
                          }
                          correctColumns.remove(columnName);
                      }
                  }
                  if (!correctColumns.isEmpty()) {
                      throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void clearCompanyTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM COMPANY");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the COMPANY table.");
              }
              try {
                  getConnection().createStatement().execute("ALTER TABLE COMPANY ALTER COLUMN id RESTART WITH 1");
              } catch (SQLException ex) {
                  throw new WrongAnswer("Can't reset the ID column in the COMPANY table. " +
                          "Make sure that this column is AUTO_INCREMENT");
              }
          }
      
          public void clearCarTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM CAR");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the CAR table.");
              }
              try {
                  getConnection().createStatement().execute("ALTER TABLE CAR ALTER COLUMN id RESTART WITH 1");
              } catch (SQLException ex) {
                  throw new WrongAnswer("Can't reset the ID column in the CAR table. " +
                          "Make sure that this column is AUTO_INCREMENT");
              }
          }
      
          public void clearCustomerTable() {
              try {
                  getConnection().createStatement().execute("DELETE FROM CUSTOMER");
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
              }
          }
      
          public void checkCompany(String name) {
              try {
                  PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                  preparedStatement.setString(1, name);
                  ResultSet resultSet = preparedStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                              "Make sure you don't clear the database after starting the program");
                  }
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
              }
          }
      
          public void checkCar(String companyName, String carName) {
              try {
                  PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                  companyStatement.setString(1, companyName);
      
                  PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                  carStatement.setString(1, carName);
      
                  ResultSet resultSet = companyStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                  }
      
                  int id = resultSet.getInt("ID");
      
                  resultSet = carStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                              "Make sure you don't clear the database after starting the program");
                  }
                  if (resultSet.getInt("COMPANY_ID") != id) {
                      throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCustomer(String name, String carName) {
              try {
                  PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                  preparedStatement.setString(1, name);
                  ResultSet resultSet = preparedStatement.executeQuery();
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                              "Make sure you don't clear the database after starting the program");
                  }
      
                  if (carName == null) {
                      if (resultSet.getString("RENTED_CAR_ID") != null) {
                          throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                      }
                      return;
                  }
      
                  PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                  carStatement.setString(1, carName);
                  ResultSet carResultSet = carStatement.executeQuery();
      
                  if (!carResultSet.next()) {
                      throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                              "Make sure you don't clear the database after starting the program");
                  }
      
                  int carId = carResultSet.getInt("ID");
      
                  if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                      throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                  }
              } catch (SQLException ignored) {
                  throw new WrongAnswer("Can't select data from the 'CAR' or 'CUSTOMER' tables!");
              }
          }
      
      
          public void checkCompanyColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCarColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                  }
      
                  if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                      throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      
          public void checkCustomerColumnProperties() {
              try {
                  ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                          " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                  }
      
                  resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                          " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");
      
                  if (!resultSet.next()) {
                      throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                  }
      
                  if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                      throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                  }
              } catch (SQLException exception) {
                  throw new WrongAnswer("Can't execute query to the database.\n" +
                          "SQL Message:\n" + exception.getMessage());
              }
          }
      }
    learner_created: false
  - name: src/carsharing/datalayer/CarSharingDao.java
    visible: true
    text: |
      package carsharing.datalayer;
      
      import carsharing.datalayer.company.Company;
      
      import java.util.List;
      
      public interface CarSharingDao<T> {
          List<T> findAll();
          T findById(int id);
          void add(T t);
          void update(T t);
          void deleteById(int id);
      }
    learner_created: true
  - name: src/carsharing/services/MainMenu.java
    visible: true
    text: |
      package carsharing.services;
      
      import java.util.Scanner;
      
      public class MainMenu {
          private boolean isWorking = true;
          private int step = 0;
          private ManagerMenu managerMenu = new ManagerMenu();
          public void start(String url) {
              Scanner scanner = new Scanner(System.in);
              while(isWorking) {
                  System.out.println("1. Log in as a manager");
                  System.out.println("0. Exit");
                  System.out.print("> ");
                  step = scanner.nextInt();
                  switch (step) {
                      case 1:
                          managerMenu.start(url);
                          break;
                      case 0:
                          isWorking = false;
                          break;
                      default:
                          isWorking = false;
                          System.out.println("Мы не работаем с этим");
                  }
                  System.out.println("");
              }
          }
      }
    learner_created: true
  - name: src/carsharing/Main.java
    visible: true
    text: |-
      package carsharing;
      
      public class Main {
      
          public static void main(String[] args) {
              // write your code here
          }
      }
    learner_created: false
  - name: src/carsharing/datalayer/car/Car.java
    visible: true
    text: |
      package carsharing.datalayer.car;
      
      
      public class Car  {
      
          private int id;
          private String name;
          private int company_id;
      
          public Car(int id, String name, int company_id) {
              this.id = id;
              this.name = name;
              this.company_id = company_id;
          }
      
          public Car(String name, int company_id) {
              this.name = name;
              this.company_id = company_id;
          }
      
          public int getId() {
              return id;
          }
      
          public void setId(int id) {
              this.id = id;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      
          public int getCompany_id() {
              return company_id;
          }
      
          public void setCompany_id(int company_id) {
              this.company_id = company_id;
          }
      }
    learner_created: true
  - name: src/carsharing/services/CustomerMenu.java
    visible: true
    learner_created: true
  - name: src/carsharing/datalayer/car/DBCarDAO.java
    visible: true
    text: |
      package carsharing.datalayer.car;
      
      import carsharing.datalayer.CarSharingDao;
      import carsharing.datalayer.DbClient;
      import carsharing.datalayer.company.Company;
      import org.h2.jdbcx.JdbcDataSource;
      
      import java.util.ArrayList;
      import java.util.List;
      
      public class DBCarDAO implements CarSharingDao<Car> {
      
          static final String JDBC_DRIVER = "org.h2.Driver";
          String DB_URL ;
          private static final String SELECT_ALL = "SELECT * FROM CAR";
          private static final String INSERT_DATA = "INSERT INTO CAR  (Name, COMPANY_ID) VALUES ('%s', %d)";
          private final DbClient dbClient;
      
          public DBCarDAO(String url) {
              DB_URL = url;
              JdbcDataSource dataSource = new JdbcDataSource();
              dataSource.setURL(DB_URL);
              dbClient = new DbClient(dataSource);
              try{
                  Class.forName(JDBC_DRIVER);
              }catch (Exception e) {
                  e.printStackTrace();
              }
          }
      
          @Override
          public List<Car> findAll() {
              return  dbClient.selectForListCars(SELECT_ALL);
          }
      
          @Override
          public Car findById(int id) {
              return null;
          }
      
          @Override
          public void add(Car car) {
              dbClient.run(String.format(
                      INSERT_DATA, car.getName(),car.getCompany_id()));
          }
      
          @Override
          public void update(Car developer) {
      
          }
      
          @Override
          public void deleteById(int id) {
      
          }
      }
    learner_created: true
  - name: src/carsharing/datalayer/DbClient.java
    visible: true
    text: |
      package carsharing.datalayer;
      
      import carsharing.datalayer.car.Car;
      import carsharing.datalayer.company.Company;
      
      import javax.sql.DataSource;
      import java.sql.Connection;
      import java.sql.ResultSet;
      import java.sql.SQLException;
      import java.sql.Statement;
      import java.util.ArrayList;
      import java.util.List;
      
      public class DbClient {
          private final DataSource dataSource;
      
          public DbClient(DataSource dataSource) {
              this.dataSource = dataSource;
          }
      
          public void run(String str) {
              try (Connection con = dataSource.getConnection(); // Statement creation
                   Statement statement = con.createStatement()
              ) {
                  statement.executeUpdate(str); // Statement execution
              } catch (SQLException e) {
                  e.printStackTrace();
              }
          }
      
      //    public Company select(String query) {
      //        List<Company> companies = selectForList(query);
      //        if (companies.size() == 1) {
      //            return companies.get(0);
      //        } else if (companies.size() == 0) {
      //            return null;
      //        } else {
      //            throw new IllegalStateException("Query returned more than one object");
      //        }
      //    }
      
          public List<Company> selectForListCompanies(String query) {
              List<Company> companies = new ArrayList<>();
      
              try (Connection con = dataSource.getConnection();
                   Statement statement = con.createStatement();
                   ResultSet resultSetItem = statement.executeQuery(query)
              ) {
                  while (resultSetItem.next()) {
                      // Retrieve column values
                      int id = resultSetItem.getInt("id");
                      String name = resultSetItem.getString("name");
                      Company developer = new Company(name, id);
                      companies.add(developer);
                  }
      
                  return companies;
              } catch (SQLException e) {
                  e.printStackTrace();
              }
      
              return companies;
          }
          public List<Car> selectForListCars(String query) {
              List<Car> companies = new ArrayList<>();
      
              try (Connection con = dataSource.getConnection();
                   Statement statement = con.createStatement();
                   ResultSet resultSetItem = statement.executeQuery(query)
              ) {
                  while (resultSetItem.next()) {
                      // Retrieve column values
                      int id = resultSetItem.getInt("id");
                      int comapnyId = resultSetItem.getInt("COMPANY_ID");
                      String name = resultSetItem.getString("name");
                      Car developer = new Car(id,name, comapnyId);
                      companies.add(developer);
                  }
      
                  return companies;
              } catch (SQLException e) {
                  e.printStackTrace();
              }
      
              return companies;
          }
      }
    learner_created: true
  - name: src/carsharing/services/ManagerMenu.java
    visible: true
    text: |
      package carsharing.services;
      
      import carsharing.datalayer.company.Company;
      import carsharing.datalayer.company.DBCompanyDAO;
      
      import java.util.List;
      import java.util.Scanner;
      
      public class ManagerMenu {
          private boolean isWorking = true;
          private int step = 0;
          DBCompanyDAO dbCompanyDAO;
      
          CompanyMenu companyMenu = new CompanyMenu();
          String url;
      
      
          public void start(String url) {
              Scanner scanner = new Scanner(System.in);
              dbCompanyDAO = new DBCompanyDAO(url);
              this.url = url;
              while(isWorking) {
                  System.out.println("1. Company list");
                  System.out.println("2. Create a company");
                  System.out.println("0. Back");
                  System.out.print("> ");
                  step = scanner.nextInt();
                  switch (step) {
                      case 2:
                          createCompany();
                          break;
                      case 1:
                          companyList();
                          break;
                      case 0:
                          isWorking = false;
                          break;
                      default:
                          isWorking = false;
                          System.out.println("Мы не работаем с этим");
                  }
                  System.out.println();
              }
          }
      
          public void companyList() {
              Scanner scanner = new Scanner(System.in);
              int step= 0;
              List<Company> companies =  dbCompanyDAO.findAll();
              if(dbCompanyDAO.findAll().isEmpty()) {
                  System.out.println("The company list is empty!");
              }else {
                  System.out.println("Choose the company:");
                  companies.stream().forEach(company -> {
                      System.out.println(company.getId() + ". " + company.getName());
                  });
                  System.out.println("0. Back");
                  System.out.print("> ");
                  step = scanner.nextInt();
                  if(step != 0) {
                      companyMenu.start(url, step - 1, companies);
                  }
              }
          }
      
          public void createCompany() {
              Scanner scanner = new Scanner(System.in);
              String company;
              System.out.println("Enter the company name:");
              System.out.print("> ");
              company = scanner.nextLine();
              dbCompanyDAO.add(new Company(company));
              System.out.println("The company was created!");
          }
      }
    learner_created: true
  - name: src/carsharing/services/CompanyMenu.java
    visible: true
    text: |
      package carsharing.services;
      
      import carsharing.datalayer.car.Car;
      import carsharing.datalayer.car.DBCarDAO;
      import carsharing.datalayer.company.Company;
      
      import java.util.List;
      import java.util.Scanner;
      
      public class CompanyMenu {
          private boolean isWorking = true;
          private int step = 0;
          DBCarDAO dbCarDAO;
      
          public void start (String url, int id, List<Company> companies) {
              Scanner scanner = new Scanner(System.in);
              dbCarDAO = new DBCarDAO(url);
              System.out.println("'" + companies.get(id).getName() + "'" + " company:");
              isWorking = true;
              while(isWorking) {
                  System.out.println("1. Car list");
                  System.out.println("2. Create a car");
                  System.out.println("0. Back");
                  System.out.print("> ");
                  step = scanner.nextInt();
                  switch (step) {
                      case 2:
                          createCar(companies.get(id).getId());
                          break;
                      case 1:
                          carList(companies.get(id).getId());
                          break;
                      case 0:
                          isWorking = false;
                          break;
                      default:
                          isWorking = false;
                          System.out.println("Мы не работаем с этим");
                  }
                  System.out.println();
              }
      
          }
      
          public void createCar(int companyId) {
              Scanner scanner = new Scanner(System.in);
              String car;
              System.out.println("Enter the car name:");
              System.out.print("> ");
              car = scanner.nextLine();
              dbCarDAO.add(new Car(car,companyId));
              System.out.println("The car was created!");
          }
          public void carList(int company) {
              int j = 0;
              List<Car> allCars =  dbCarDAO.findAll().stream()
                      .filter(car -> car.getCompany_id() == company).toList();
              if(allCars.isEmpty()) {
                  System.out.println("The car list is empty!");
              }else {
                  System.out.println("Car list:");
                  for (Car car:allCars) {
                      if(car.getCompany_id() == company) {
                          System.out.println(++j + ". " + car.getName());
                      }
                  }
              }
          }
      }
    learner_created: true
  - name: src/carsharing/datalayer/customer/Customer.java
    visible: true
    learner_created: true
  - name: src/carsharing/datalayer/company/DBCompanyDAO.java
    visible: true
    text: |
      package carsharing.datalayer.company;
      
      import carsharing.datalayer.CarSharingDao;
      import carsharing.datalayer.DbClient;
      import carsharing.datalayer.car.Car;
      import org.h2.jdbcx.JdbcDataSource;
      
      import java.util.ArrayList;
      import java.util.List;
      
      public class DBCompanyDAO implements CarSharingDao<Company> {
          // JDBC driver name and database URL
          static final String JDBC_DRIVER = "org.h2.Driver";
           String DB_URL ;
          private static final String SELECT_ALL = "SELECT * FROM COMPANY";
          private static final String INSERT_DATA = "INSERT INTO COMPANY (Name) VALUES ('%s')";
      
          private final DbClient dbClient;
      
          public DBCompanyDAO(String url) {
              DB_URL = url;
              JdbcDataSource dataSource = new JdbcDataSource();
              dataSource.setURL(DB_URL);
              dbClient = new DbClient(dataSource);
              try{
                  Class.forName(JDBC_DRIVER);
              }catch (Exception e) {
                  e.printStackTrace();
              }
          }
      
          @Override
          public List<Company> findAll() {
              return dbClient.selectForListCompanies(SELECT_ALL);
          }
      
          @Override
          public Company findById(int id) {
              return null;
          }
      
          @Override
          public void add(Company company) {
              dbClient.run(String.format(
                      INSERT_DATA, company.getName()));
          }
      
          @Override
          public void update(Company company) {
      
          }
      
          @Override
          public void deleteById(int id) {
      
          }
      
      }
    learner_created: true
  - name: src/carsharing/datalayer/company/Company.java
    visible: true
    text: |
      package carsharing.datalayer.company;
      
      
      
      public class Company  {
          String name;
          int id;
      
          public Company(String name) {
              this.name = name;
          }
      
          public Company(String name, int id) {
              this.name = name;
              this.id = id;
          }
      
          public int getId() {
              return id;
          }
      
          public void setId(int id) {
              this.id = id;
          }
      
          public String getName() {
              return name;
          }
      
          public void setName(String name) {
              this.name = name;
          }
      }
    learner_created: true
  - name: src/carsharing/datalayer/customer/DBCustomerDAO.java
    visible: true
    learner_created: true
  - name: src/carsharing/db/carsharing.mv.db
    visible: true
    learner_created: true
  - name: src/carsharing/db/carsharing.trace.db
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/11504#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sat, 11 Nov 2023 17:59:12 UTC"
record: -1
